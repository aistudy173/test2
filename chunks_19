from tree_sitter import Language, Parser
import tiktoken

# Load Java grammar (build once)
# Language.build_library('build/my-languages.so', ['tree-sitter-java'])
JAVA_LANGUAGE = Language('build/my-languages.so', 'java')
parser = Parser()
parser.set_language(JAVA_LANGUAGE)

enc = tiktoken.encoding_for_model("gpt-4o-mini")

def count_tokens(text, model="gpt-4o-mini"):
    return len(enc.encode(text))

def split_code(code, max_tokens=512):
    """Naive split by tokens if too long"""
    tokens = enc.encode(code)
    if len(tokens) <= max_tokens:
        return [code]

    chunks = []
    start = 0
    while start < len(tokens):
        end = min(start + max_tokens, len(tokens))
        sub = enc.decode(tokens[start:end])
        chunks.append(sub)
        start = end
    return chunks

def extract_classes_and_methods(java_code, max_tokens=512):
    """
    Extract classes and their methods hierarchically.
    Returns a nested structure: [{class_name, class_chunks, methods:[{method_name, method_chunks}]}]
    """
    tree = parser.parse(bytes(java_code, "utf8"))
    root = tree.root_node

    results = []

    for class_node in root.children:
        if class_node.type == "class_declaration":
            class_name = None
            for child in class_node.children:
                if child.type == "identifier":
                    class_name = java_code[child.start_byte:child.end_byte]
            
            class_code = java_code[class_node.start_byte:class_node.end_byte]
            class_chunks = split_code(class_code, max_tokens=max_tokens)

            # Collect methods inside this class
            methods = []
            for child in class_node.children:
                if child.type == "method_declaration":
                    method_name = None
                    for c in child.children:
                        if c.type == "identifier":
                            method_name = java_code[c.start_byte:c.end_byte]

                    method_code = java_code[child.start_byte:child.end_byte]
                    method_chunks = split_code(method_code, max_tokens=max_tokens)

                    methods.append({
                        "method_name": method_name,
                        "method_chunks": method_chunks
                    })

            results.append({
                "class_name": class_name,
                "class_chunks": class_chunks,
                "methods": methods
            })

    return results
